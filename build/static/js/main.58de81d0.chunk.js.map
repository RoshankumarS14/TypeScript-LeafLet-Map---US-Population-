{"version":3,"sources":["streamlit/ArrowTable.ts","streamlit/streamlit.ts","index.tsx"],"names":["ArrowTable","constructor","dataBuffer","indexBuffer","columnsBuffer","styler","dataTable","indexTable","columnsTable","getCell","rowIndex","columnIndex","isBlankCell","this","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","push","type","join","content","dataColumnIndex","getContent","dataRowIndex","id","concat","uuid","displayValuesTable","table","column","getColumnAt","getColumnTypeId","Type","Timestamp","nanosToDate","get","Table","from","caption","styles","undefined","length","numCols","rows","dataRows","columns","dataColumns","schema","fields","typeId","nanos","Date","ComponentMessageType","Streamlit","_class","API_VERSION","RENDER_EVENT","events","EventTarget","registeredMessageListener","lastFrameHeight","setComponentReady","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","body","scrollHeight","SET_FRAME_HEIGHT","setComponentValue","value","SET_COMPONENT_VALUE","event","data","onRenderMessage","args","console","error","dataframeArgs","argsDataframeToObject","eventData","disabled","Boolean","CustomEvent","detail","dispatchEvent","argsDataframe","argsDataframeArrow","map","_ref","key","toArrowTable","Object","fromEntries","df","index","parent","postMessage","isStreamlitMessage","createElement","style","setAttribute","appendChild","mymap","L","setView","circles","attribution","maxZoom","tileSize","zoomOffset","accessToken","addTo","drawnItems","addLayer","drawControl","Draw","edit","featureGroup","draw","polyline","polygon","rectangle","marker","circle","metric","feet","nautic","shapeOptions","color","weight","fill","fillColor","fillOpacity","addControl","on","e","layer","center","getLatLng","radius","getRadius","latlng"],"mappings":"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","file":"static/js/main.58de81d0.chunk.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018-2019 Streamlit Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Table, Type } from \"apache-arrow\"\r\n\r\ntype CellType = \"blank\" | \"index\" | \"columns\" | \"data\"\r\n\r\nexport interface ArrowDataframeProto {\r\n  data: ArrowTableProto\r\n  height: string\r\n  width: string\r\n}\r\n\r\nexport interface ArrowTableProto {\r\n  data: Uint8Array\r\n  index: Uint8Array\r\n  columns: Uint8Array\r\n  styler: Styler\r\n}\r\n\r\ninterface Cell {\r\n  classNames: string\r\n  content: string\r\n  id?: string\r\n  type: CellType\r\n}\r\n\r\ninterface Styler {\r\n  caption?: string\r\n  displayValuesTable: Table\r\n  styles?: string\r\n  uuid: string\r\n}\r\n\r\nexport class ArrowTable {\r\n  private readonly dataTable: Table\r\n  private readonly indexTable: Table\r\n  private readonly columnsTable: Table\r\n  private readonly styler?: Styler\r\n\r\n  constructor(\r\n    dataBuffer: Uint8Array,\r\n    indexBuffer: Uint8Array,\r\n    columnsBuffer: Uint8Array,\r\n    styler?: any\r\n  ) {\r\n    this.dataTable = Table.from(dataBuffer)\r\n    this.indexTable = Table.from(indexBuffer)\r\n    this.columnsTable = Table.from(columnsBuffer)\r\n    this.styler = styler\r\n      ? {\r\n          caption: styler.get(\"caption\"),\r\n          displayValuesTable: Table.from(styler.get(\"displayValues\")),\r\n          styles: styler.get(\"styles\"),\r\n          uuid: styler.get(\"uuid\"),\r\n        }\r\n      : undefined\r\n  }\r\n\r\n  get rows(): number {\r\n    return this.indexTable.length + this.columnsTable.numCols\r\n  }\r\n\r\n  get columns(): number {\r\n    return this.indexTable.numCols + this.columnsTable.length\r\n  }\r\n\r\n  get headerRows(): number {\r\n    return this.rows - this.dataRows\r\n  }\r\n\r\n  get headerColumns(): number {\r\n    return this.columns - this.dataColumns\r\n  }\r\n\r\n  get dataRows(): number {\r\n    return this.dataTable.length\r\n  }\r\n\r\n  get dataColumns(): number {\r\n    return this.dataTable.numCols\r\n  }\r\n\r\n  get uuid(): string | undefined {\r\n    return this.styler && this.styler.uuid\r\n  }\r\n\r\n  get caption(): string | undefined {\r\n    return this.styler && this.styler.caption\r\n  }\r\n\r\n  get styles(): string | undefined {\r\n    return this.styler && this.styler.styles\r\n  }\r\n\r\n  get table(): Table {\r\n    return this.dataTable\r\n  }\r\n\r\n  get index(): Table {\r\n    return this.indexTable\r\n  }\r\n\r\n  get columnTable(): Table {\r\n    return this.columnsTable\r\n  }\r\n\r\n  public getCell = (rowIndex: number, columnIndex: number): Cell => {\r\n    const isBlankCell =\r\n      rowIndex < this.headerRows && columnIndex < this.headerColumns\r\n    const isIndexCell =\r\n      rowIndex >= this.headerRows && columnIndex < this.headerColumns\r\n    const isColumnsCell =\r\n      rowIndex < this.headerRows && columnIndex >= this.headerColumns\r\n\r\n    if (isBlankCell) {\r\n      const classNames = [\"blank\"]\r\n      if (columnIndex > 0) {\r\n        classNames.push(\"level\" + rowIndex)\r\n      }\r\n\r\n      return {\r\n        type: \"blank\",\r\n        classNames: classNames.join(\" \"),\r\n        content: \"\",\r\n      }\r\n    } else if (isColumnsCell) {\r\n      const dataColumnIndex = columnIndex - this.headerColumns\r\n      const classNames = [\r\n        \"col_heading\",\r\n        \"level\" + rowIndex,\r\n        \"col\" + dataColumnIndex,\r\n      ]\r\n\r\n      return {\r\n        type: \"columns\",\r\n        classNames: classNames.join(\" \"),\r\n        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),\r\n      }\r\n    } else if (isIndexCell) {\r\n      const dataRowIndex = rowIndex - this.headerRows\r\n      const classNames = [\r\n        \"row_heading\",\r\n        \"level\" + columnIndex,\r\n        \"row\" + dataRowIndex,\r\n      ]\r\n\r\n      return {\r\n        type: \"index\",\r\n        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\r\n        classNames: classNames.join(\" \"),\r\n        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),\r\n      }\r\n    } else {\r\n      const dataRowIndex = rowIndex - this.headerRows\r\n      const dataColumnIndex = columnIndex - this.headerColumns\r\n      const classNames = [\r\n        \"data\",\r\n        \"row\" + dataRowIndex,\r\n        \"col\" + dataColumnIndex,\r\n      ]\r\n      const content = this.styler\r\n        ? this.getContent(\r\n            this.styler.displayValuesTable,\r\n            dataRowIndex,\r\n            dataColumnIndex\r\n          )\r\n        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex)\r\n\r\n      return {\r\n        type: \"data\",\r\n        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\r\n        classNames: classNames.join(\" \"),\r\n        content,\r\n      }\r\n    }\r\n  }\r\n\r\n  public getContent = (\r\n    table: Table,\r\n    rowIndex: number,\r\n    columnIndex: number\r\n  ): any => {\r\n    const column = table.getColumnAt(columnIndex)\r\n    if (column === null) {\r\n      return \"\"\r\n    }\r\n\r\n    const columnTypeId = this.getColumnTypeId(table, columnIndex)\r\n    switch (columnTypeId) {\r\n      case Type.Timestamp: {\r\n        return this.nanosToDate(column.get(rowIndex))\r\n      }\r\n      default: {\r\n        return column.get(rowIndex)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns apache-arrow specific typeId of column.\r\n   */\r\n  private getColumnTypeId(table: Table, columnIndex: number): Type {\r\n    return table.schema.fields[columnIndex].type.typeId\r\n  }\r\n\r\n  private nanosToDate(nanos: number): Date {\r\n    return new Date(nanos / 1e6)\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018-2020 Streamlit Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// Safari doesn't support the EventTarget class, so we use a shim.\r\nimport { EventTarget } from \"event-target-shim\"\r\nimport { ArrowDataframeProto, ArrowTable } from \"./ArrowTable\"\r\n\r\n/** Data sent in the custom Streamlit render event. */\r\nexport interface RenderData {\r\n  args: any\r\n  disabled: boolean\r\n}\r\n\r\n/** Messages from Component -> Streamlit */\r\nenum ComponentMessageType {\r\n  // A component sends this message when it's ready to receive messages\r\n  // from Streamlit. Streamlit won't send any messages until it gets this.\r\n  // Data: { apiVersion: number }\r\n  COMPONENT_READY = \"streamlit:componentReady\",\r\n\r\n  // The component has a new widget value. Send it back to Streamlit, which\r\n  // will then re-run the app.\r\n  // Data: { value: any }\r\n  SET_COMPONENT_VALUE = \"streamlit:setComponentValue\",\r\n\r\n  // The component has a new height for its iframe.\r\n  // Data: { height: number }\r\n  SET_FRAME_HEIGHT = \"streamlit:setFrameHeight\",\r\n}\r\n\r\n/**\r\n * Streamlit communication API.\r\n *\r\n * Components can send data to Streamlit via the functions defined here,\r\n * and receive data from Streamlit via the `events` property.\r\n */\r\nexport class Streamlit {\r\n  /**\r\n   * The Streamlit component API version we're targetting.\r\n   * There's currently only 1!\r\n   */\r\n  public static readonly API_VERSION = 1\r\n\r\n  public static readonly RENDER_EVENT = \"streamlit:render\"\r\n\r\n  /** Dispatches events received from Streamlit. */\r\n  public static readonly events = new EventTarget()\r\n\r\n  private static registeredMessageListener = false\r\n  private static lastFrameHeight?: number\r\n\r\n  /**\r\n   * Tell Streamlit that the component is ready to start receiving data.\r\n   * Streamlit will defer emitting RENDER events until it receives the\r\n   * COMPONENT_READY message.\r\n   */\r\n  public static setComponentReady = (): void => {\r\n    if (!Streamlit.registeredMessageListener) {\r\n      // Register for message events if we haven't already\r\n      window.addEventListener(\"message\", Streamlit.onMessageEvent)\r\n      Streamlit.registeredMessageListener = true\r\n    }\r\n\r\n    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\r\n      apiVersion: Streamlit.API_VERSION,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Report the component's height to Streamlit.\r\n   * This should be called every time the component changes its DOM - that is,\r\n   * when it's first loaded, and any time it updates.\r\n   */\r\n  public static setFrameHeight = (height?: number): void => {\r\n    if (height === undefined) {\r\n      // `height` is optional. If undefined, it defaults to scrollHeight,\r\n      // which is the entire height of the element minus its border,\r\n      // scrollbar, and margin.\r\n      height = document.body.scrollHeight\r\n    }\r\n\r\n    if (height === Streamlit.lastFrameHeight) {\r\n      // Don't bother updating if our height hasn't changed.\r\n      return\r\n    }\r\n\r\n    Streamlit.lastFrameHeight = height\r\n    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height })\r\n  }\r\n\r\n  /**\r\n   * Set the component's value. This value will be returned to the Python\r\n   * script, and the script will be re-run.\r\n   *\r\n   * For example:\r\n   *\r\n   * JavaScript:\r\n   * Streamlit.setComponentValue(\"ahoy!\")\r\n   *\r\n   * Python:\r\n   * value = st.my_component(...)\r\n   * st.write(value) # -> \"ahoy!\"\r\n   *\r\n   * The value must be serializable into JSON.\r\n   */\r\n  public static setComponentValue = (value: any): void => {\r\n    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, { value })\r\n  }\r\n\r\n  /** Receive a ForwardMsg from the Streamlit app */\r\n  private static onMessageEvent = (event: MessageEvent): void => {\r\n    const type = event.data[\"type\"]\r\n    switch (type) {\r\n      case Streamlit.RENDER_EVENT:\r\n        Streamlit.onRenderMessage(event.data)\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle an untyped Streamlit render event and redispatch it as a\r\n   * StreamlitRenderEvent.\r\n   */\r\n  private static onRenderMessage = (data: any): void => {\r\n    let args = data[\"args\"]\r\n    if (args == null) {\r\n      console.error(\r\n        `Got null args in onRenderMessage. This should never happen`\r\n      )\r\n      args = {}\r\n    }\r\n\r\n    // Parse our dataframe arguments with arrow, and merge them into our args dict\r\n    const dataframeArgs =\r\n      data[\"dfs\"] && data[\"dfs\"].length > 0\r\n        ? Streamlit.argsDataframeToObject(data[\"dfs\"])\r\n        : {}\r\n\r\n    args = {\r\n      ...args,\r\n      ...dataframeArgs,\r\n    }\r\n\r\n    const disabled = Boolean(data[\"disabled\"])\r\n\r\n    // Dispatch a render event!\r\n    const eventData = { disabled, args }\r\n    const event = new CustomEvent<RenderData>(Streamlit.RENDER_EVENT, {\r\n      detail: eventData,\r\n    })\r\n    Streamlit.events.dispatchEvent(event)\r\n  }\r\n\r\n  private static argsDataframeToObject = (\r\n    argsDataframe: ArgsDataframe[]\r\n  ): object => {\r\n    const argsDataframeArrow = argsDataframe.map(\r\n      ({ key, value }: ArgsDataframe) => [key, Streamlit.toArrowTable(value)]\r\n    )\r\n    return Object.fromEntries(argsDataframeArrow)\r\n  }\r\n\r\n  private static toArrowTable = (df: ArrowDataframeProto): ArrowTable => {\r\n    const { data, index, columns } = df.data\r\n    return new ArrowTable(data, index, columns)\r\n  }\r\n\r\n  /** Post a message to the Streamlit app. */\r\n  private static sendBackMsg = (type: string, data?: any): void => {\r\n    window.parent.postMessage(\r\n      {\r\n        isStreamlitMessage: true,\r\n        type: type,\r\n        ...data,\r\n      },\r\n      \"*\"\r\n    )\r\n  }\r\n}\r\n\r\ninterface ArgsDataframe {\r\n  key: string\r\n  value: ArrowDataframeProto\r\n}\r\n","import { Streamlit } from \"./streamlit\"\r\nimport * as L from \"leaflet\"\r\nimport \"leaflet/dist/leaflet.css\"\r\n// Import the Leaflet.draw CSS and JS files\r\nimport \"leaflet-draw/dist/leaflet.draw.css\"\r\nimport \"leaflet-draw/dist/leaflet.draw.js\"\r\n// import * as EasyButton from 'leaflet-easybutton'\r\nimport 'leaflet-easybutton/src/easy-button.css'\r\nimport * as EasyButton from 'leaflet-easybutton'\r\n\r\n\r\nconst map = document.createElement(\"div\")\r\nmap.style.height = \"500px\"\r\nmap.setAttribute(\"id\", \"mapid\")\r\ndocument.body.appendChild(map)\r\nconst mymap = L.map(\"mapid\").setView([37.8, -96], 4)\r\nlet circles: {center: L.LatLng, radius: number}[] = []\r\n\r\n\r\nL.tileLayer(\r\n  \"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\",\r\n  {\r\n    attribution:'© Access AI',\r\n    maxZoom: 18,\r\n    id: \"mapbox/outdoors-v11\",\r\n    tileSize: 512,\r\n    zoomOffset: -1,\r\n    accessToken: \"pk.eyJ1IjoidGpkMjAyNCIsImEiOiJjbHIyNmU2Z2oweTRmMnFuMWN1dmN1N3V4In0.9dU2pjRURk4qs31aBAV4lg\",\r\n  }\r\n).addTo(mymap)\r\n\r\n\r\nlet drawnItems: L.FeatureGroup = new L.FeatureGroup();\r\nmymap.addLayer(drawnItems);\r\n\r\n// Create a new L.Control.Draw object and add it to the map\r\nconst drawControl = new L.Control.Draw({\r\n  // Specify the options for the drawing tools\r\n  edit: {\r\n    featureGroup: drawnItems\r\n  },\r\n  draw: {\r\n    // Disable the other drawing tools\r\n    polyline: false,\r\n    polygon: false,\r\n    rectangle: false,\r\n    marker: false,\r\n    // Enable the circle tool and customize its style\r\n    circle: {\r\n      metric: false, // Disable metric units\r\n      feet: false, // Disable feet units\r\n      nautic: false, // Disable nautical miles\r\n      // imperial: true, // Enable imperial units (miles)\r\n      shapeOptions: {\r\n        color: \"blue\",\r\n        weight: 3,\r\n        fill: true,\r\n        fillColor: \"lightblue\",\r\n        fillOpacity: 0.5\r\n      }\r\n    }\r\n  }\r\n})\r\nmymap.addControl(drawControl)\r\n\r\nmymap.on('draw:created', function (e) {\r\n  var layer = e.layer;\r\n  drawnItems.addLayer(layer);  // Add the layer to drawnItems\r\n});\r\n\r\n// Add an event listener for the draw:created event\r\nmymap.on(\"draw:created\", function (e: any) {\r\n  // Get the layer that was created by the drawing tool\r\n  const layer = e.layer\r\n  // Add the layer to the map\r\n  mymap.addLayer(layer)\r\n  // Get the center and radius of the circle\r\n  const center = layer.getLatLng()\r\n  const radius = layer.getRadius()\r\n  // // Show a popup with the circle information\r\n  // L.popup()\r\n  //   .setLatLng(center)\r\n  //   .setContent(\"You drew a circle with center \" + center.toString() + \" and radius \" + radius + \" meters\")\r\n  //   .openOn(mymap)\r\n  // Add the circle information to the circles array\r\n  circles.push({center, radius})\r\n  // Send the circles array to Streamlit\r\n  Streamlit.setComponentValue(circles)\r\n  Streamlit.setFrameHeight()\r\n})\r\n\r\nfunction onMapClick(e: any) {\r\n  // L.popup()\r\n  //   .setLatLng(e.latlng)\r\n  //   .setContent(\"You clicked the map at \" + e.latlng.toString())\r\n  //   .openOn(mymap)\r\n  Streamlit.setComponentValue(e.latlng)\r\n  Streamlit.setFrameHeight()\r\n}\r\n\r\nmymap.on(\"click\", onMapClick)\r\n\r\n// Add this new event listener\r\nmymap.on(\"draw:deleted\", function (e: any) {\r\n  // Clear the circles array\r\n  circles = []\r\n  // // Update the Streamlit component value\r\n  // Streamlit.setComponentValue(circles)\r\n  // Streamlit.setFrameHeight()\r\n})\r\n\r\nlet selectState = false\r\n\r\nfunction onRender(event: Event): void {\r\n  Streamlit.setFrameHeight()\r\n}\r\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\r\n\r\nStreamlit.setComponentReady()\r\nStreamlit.setFrameHeight()\r\n"],"sourceRoot":""}